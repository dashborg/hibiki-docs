<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reference on Hibiki HTML Documentation</title>
    <link>https://docs.hibikihtml.com/reference/</link>
    <description>Recent content in Reference on Hibiki HTML Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://docs.hibikihtml.com/reference/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Actions</title>
      <link>https://docs.hibikihtml.com/reference/actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.hibikihtml.com/reference/actions/</guid>
      <description>Hibiki HTML handlers run actions to manipulate the page state. Actions can be run by frontend Hibiki HTML code, or they can be returned as JSON from backend code.
To return actions as JSON return an object with a key named &amp;ldquo;hibikiactions&amp;rdquo;:
{ &amp;quot;hibikiactions&amp;quot;: [action-json, action-json, ...], }       setdata setreturn callhandler fireevent throw ifblock html log nop       setdata    The setdata action updates data in the data model:</description>
    </item>
    
    <item>
      <title>Actions (Advanced)</title>
      <link>https://docs.hibikihtml.com/reference/actions-advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.hibikihtml.com/reference/actions-advanced/</guid>
      <description>Hibiki HTML actions are very flexible. Here are some advanced techniques that allow you to mix backend and frontend data, and execute dynamic code.
   hibikiexpr hibikicontext blobs hibikihandler     hibikiexpr    Most action data can be set as a literal string/object or as a hibikiexpr. A hibikiexpr will be evaluated on the client side. Any data, event, or callpath value can be set to a hibikiexpr.</description>
    </item>
    
    <item>
      <title>Expression Reference</title>
      <link>https://docs.hibikihtml.com/reference/expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.hibikihtml.com/reference/expressions/</guid>
      <description>Hibiki HTML features a full expression language to bind your HTML to the frontend data model. Some attributes like bind use expressions directly. Other attributes, and style declarations are just plain strings and are not evaluated by default. Any attribute or style property can be evaulated by using a * as it&amp;rsquo;s first character.
Here are some examples:
Assuming that $.data = {x: 5, y: 20} # bind expressions are always evaluated: &amp;lt;h-text bind=&amp;quot;$.</description>
    </item>
    
    <item>
      <title>Core Tags</title>
      <link>https://docs.hibikihtml.com/reference/core-tags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.hibikihtml.com/reference/core-tags/</guid>
      <description>Node Tags  &amp;lt;h-text&amp;gt; &amp;lt;h-fragment&amp;gt; &amp;lt;h-dyn&amp;gt; &amp;lt;h-children&amp;gt; &amp;lt;h-watcher&amp;gt;   Definition Tags  &amp;lt;script&amp;gt; &amp;lt;define-vars&amp;gt; &amp;lt;define-handler&amp;gt; &amp;lt;define-component&amp;gt; &amp;lt;import-library&amp;gt;     Node Tags    &amp;lt;h-text&amp;gt;    Renders text content. If class/style are not specified, it will render as a DOM text node. If you provide values for class or style, it will render as a &amp;lt;span&amp;gt; with class and style set.
{{ expr }} is equivalent to &amp;lt;h-text bind=&amp;ldquo;expr&amp;rdquo;&amp;gt;&amp;lt;/h-text&amp;gt;.</description>
    </item>
    
    <item>
      <title>Hibiki Module</title>
      <link>https://docs.hibikihtml.com/reference/hibiki-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.hibikihtml.com/reference/hibiki-module/</guid>
      <description>The hibiki module is used for misc functionality that accesses some built in browser functionality. To call a hibiki module function use //@hibiki/[fn-name](args).
   Handler Example Description     /sleep //@hibiki/sleep(100) sleeps for given number of ms   /alert //@hibiki/alert(&amp;quot;hello&amp;quot;) calls the browser alert function with the given argument   /confirm @ok = //@hibiki/confirm(&amp;quot;Are you sure?&amp;quot;) calls the browser confirm function with the given argument.</description>
    </item>
    
    <item>
      <title>Special Types</title>
      <link>https://docs.hibikihtml.com/reference/special-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.hibikihtml.com/reference/special-types/</guid>
      <description>Children Var Hibiki Blob     Children Var    Children Var is passed as @children to all components (available inside of a &amp;lt;define-component&amp;gt; block). It contains all the evaluated children of the component. You must pass a valid ChildrenVar object to the bind expression of &amp;lt;h-children&amp;gt;. Because most of the getters return ChildrenVar objects they can be chained.
Examples:
// access children by slot.</description>
    </item>
    
    <item>
      <title>JS API</title>
      <link>https://docs.hibikihtml.com/reference/js-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.hibikihtml.com/reference/js-api/</guid>
      <description>HibikiGlobalConfig HibikiState Getting / Setting Data Registering JS Handlers     Hibiki is designed so that for simple projects you should not need to ever write a line of JavaScript. However, there are times when you may need to interact with existing JS code, or an existing JS library where there is a need to bridge data and functionality between Hibiki and the browser&amp;rsquo;s JS layer (especially when writing your own Hibiki libraries).</description>
    </item>
    
    <item>
      <title>Http Module</title>
      <link>https://docs.hibikihtml.com/reference/http-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.hibikihtml.com/reference/http-module/</guid>
      <description>Parameters to Handler Calls Dynamic URLs Http Config Additional HTTP Modules     The http module is used for all basic AJAX calls in Hibiki HTML. It allows you to call AJAX handlers and returns their results.
The module is named http, but it handles both http and https requests!  Here are some sample http module calls:
 # simple GET GET /api/test-1 # a relative URL GET relative/url.</description>
    </item>
    
    <item>
      <title>Input Controls</title>
      <link>https://docs.hibikihtml.com/reference/input-controls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.hibikihtml.com/reference/input-controls/</guid>
      <description>Standard Managed Elements &amp;lt;input type=&amp;ldquo;radio&amp;rdquo;&amp;gt; &amp;lt;input type=&amp;ldquo;checkbox&amp;rdquo;&amp;gt; &amp;lt;input type=&amp;ldquo;file&amp;rdquo;&amp;gt; &amp;lt;input type=&amp;ldquo;hidden&amp;rdquo;&amp;gt; &amp;lt;form&amp;gt; Other &amp;lt;input&amp;gt; Types     Standard Managed Elements     &amp;lt;input type=&amp;ldquo;text&amp;rdquo;&amp;gt; &amp;lt;input type=&amp;ldquo;password&amp;rdquo;&amp;gt; &amp;lt;textarea&amp;gt; &amp;lt;select&amp;gt; HTML5 &amp;lt;input&amp;gt; types: color, date, datetime-local, email, month, number, search, tel, time, url, week, and datetime  For 2-way data-binding, set value.bindpath. The element&amp;rsquo;s value will be read from the provided path, and on change the bindpath will be updated.</description>
    </item>
    
  </channel>
</rss>
